// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TtrpgHelperBackend;

#nullable disable

namespace TtrpgHelperBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251031174759_7")]
    partial class _7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TtrpgHelperBackend.Models.Authentication.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Authentication.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Authentication.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Background", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Backgrounds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dawno dawno temu w dupe",
                            Name = ""
                        });
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BackgroundId")
                        .HasColumnType("integer");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsProficient")
                        .HasColumnType("boolean");

                    b.Property<int>("SkillValue")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A fierce warrior of primal strength and rage.",
                            Name = "Barbarian"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A charismatic performer and jack-of-all-trades using song and magic.",
                            Name = "Bard"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A divine spellcaster and healer, empowered by a deity or faith.",
                            Name = "Cleric"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A master of nature, able to shapeshift and call upon natural powers.",
                            Name = "Druid"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A skilled and versatile warrior trained in weapons and armour.",
                            Name = "Fighter"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A martial artist using ki, speed, and precision in combat.",
                            Name = "Monk"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A holy warrior bound by oath, wielding divine power and martial might.",
                            Name = "Paladin"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A wilderness scout, expert with ranged weapons and nature’s allies.",
                            Name = "Ranger"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A stealthy opportunist, skilled in infiltration, tricks and precision attacks.",
                            Name = "Rogue"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A spontaneous arcane caster whose magic comes from innate power.",
                            Name = "Sorcerer"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A spellcaster who has made a pact with a powerful entity.",
                            Name = "Warlock"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A studious arcane caster whose power comes from rigorous training and knowledge.",
                            Name = "Wizard"
                        });
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Versatile and adaptable, humans receive a bonus to all abilities.",
                            Name = "Human"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Graceful and long-lived, elves are dexterous and attuned to magic.",
                            Name = "Elf"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Stout and hardy, dwarves are resilient in combat and skilled craftsmen.",
                            Name = "Dwarf"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Small and nimble, halflings are lucky and quick in tricky situations.",
                            Name = "Halfling"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A blend of human and elven heritage, charismatic and versatile.",
                            Name = "Half-Elf"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Strong and ferocious, half-orcs have orcish blood and fierce instincts.",
                            Name = "Half-Orc"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Small in stature and quick of mind, gnomes excel in intelligence and cunning.",
                            Name = "Gnome"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Marked by infernal heritage, tieflings wield otherworldly power and charisma.",
                            Name = "Tiefling"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Dark elves of the Underdark, with keen senses and shadow-affinities.",
                            Name = "Drow"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Warrior-bred astral-plane beings, fierce in combat and psionically gifted.",
                            Name = "Githyanki"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Draconic-bodied humanoids, born of dragon-ancestors, with breath weapons.",
                            Name = "Dragonborn"
                        });
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Balance, tumble, avoid falling or being shoved.",
                            Name = "Acrobatics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Interact, calm, or command animals.",
                            Name = "Animal Handling"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Knowledge of magic, magical effects and items.",
                            Name = "Arcana"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Climb, swim, jump, and physically struggle.",
                            Name = "Athletics"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lie convincingly, deceive others.",
                            Name = "Deception"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Recall lore about past events, places, people.",
                            Name = "History"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Sense motives, detect lies, read people.",
                            Name = "Insight"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Coerce or bully others through fear or strength.",
                            Name = "Intimidation"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Examine, search, deduce hidden clues and details.",
                            Name = "Investigation"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Treat injuries, diagnose illness, apply healing.",
                            Name = "Medicine"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Understand flora, fauna, natural environment.",
                            Name = "Nature"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Notice hidden things, traps, secret doors, distant sounds.",
                            Name = "Perception"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Entertain or impress through music, acting, or oration.",
                            Name = "Performance"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Convince or influence others socially.",
                            Name = "Persuasion"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Knowledge of deities, religious rites, sacred things.",
                            Name = "Religion"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Pickpocket, manipulate objects subtly, perform tricks.",
                            Name = "Sleight of Hand"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Move silently, hide, sneak past detection.",
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Track, forage, endure wilderness, navigate terrain.",
                            Name = "Survival"
                        });
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Authentication.UserRole", b =>
                {
                    b.HasOne("TtrpgHelperBackend.Models.Authentication.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TtrpgHelperBackend.Models.Authentication.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Character", b =>
                {
                    b.HasOne("TtrpgHelperBackend.Models.Background", "Background")
                        .WithMany("Characters")
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TtrpgHelperBackend.Models.Class", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TtrpgHelperBackend.Models.Race", "Race")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TtrpgHelperBackend.Models.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("Class");

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.CharacterSkill", b =>
                {
                    b.HasOne("TtrpgHelperBackend.Models.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TtrpgHelperBackend.Models.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Authentication.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Authentication.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Background", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Character", b =>
                {
                    b.Navigation("CharacterSkills");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Class", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Race", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("TtrpgHelperBackend.Models.Skill", b =>
                {
                    b.Navigation("CharacterSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
